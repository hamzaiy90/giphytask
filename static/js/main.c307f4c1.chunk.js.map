{"version":3,"sources":["components/Menu.js","components/DisplaySearch.js","container/App.js","serviceWorker.js","index.js"],"names":["Menu","onInputChange","searchApi","onRandom","onTrending","className","onChange","type","placeholder","onClick","DisplaySearch","searchdata","randomColor","data","searchArray","map","img","i","style","border","Math","floor","random","key","src","images","original","url","alt","apiKey","process","counter","App","props","fetchTrendingData","fetch","then","res","json","setState","trending","catch","err","console","log","fetchRandomData","prevState","concat","check","that","window","onscroll","innerHeight","pageYOffset","document","body","scrollHeight","state","show","searchInput","searchData","querySelector","value","alert","e","target","toLowerCase","this","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c307f4c1.chunk.js","sourcesContent":["import React from 'react';\nimport './Menu.css';\n\nconst Menu = ({ onInputChange, searchApi, onRandom, onTrending }) => {\n  return (\n    <div className=\"menu-container\">\n      <div className=\"menu-1\">\n        <input onChange={onInputChange} type=\"text\" placeholder=\"search giphies\" />\n        <button className=\"btn1\" onClick={searchApi}>Search</button>\n      </div>\n      <div className=\"menu-2\">\n        <button className=\"btn2\" onClick={onRandom}>Random</button>\n        <button className=\"btn3\" onClick={onTrending}>Trending</button>\n      </div>\n    </div>\n  )\n};\n\nexport default Menu;\n","import React from 'react';\n\nconst DisplaySearch = ({ searchdata, randomColor }) => {\n  if (searchdata.data) {\n    const searchArray = searchdata.data.map((img, i) => {\n      return <img style={{border:'20px solid ' + randomColor[Math.floor(Math.random() * 5)]}} key={i} src={img.images.original.url} alt=\"\" />\n    })\n    return (\n      <div className=\"main-content\">\n        {searchArray}\n      </div>\n    )\n  }\n  return <p>Make a search :)</p>\n}\n\nexport default DisplaySearch;\n","import React, { Component } from 'react';\nimport Menu from '../components/Menu';\nimport DisplaySearch from '../components/DisplaySearch';\nimport './App.css';\n\nlet apiKey = process.env.REACT_APP_MY_API_KEY;\nlet counter = 0;\n\nconst randomColor = [\n  'rgb(199, 193, 40)',\n  'rgb(222, 63, 63)',\n  'rgba(190, 117, 240, 0.88)',\n  'rgb(207, 115, 49)',\n  'rgb(54, 153, 61)'\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      random: [],\n      searchData: [],\n      searchInput: '',\n      trending: [],\n      show: 'trending',\n      counter: 0\n    }\n  }\n\n  componentDidMount() {\n    this.fetchTrendingData()\n    this.check();\n    /*\n    fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${apiKey}&limit=30`)\n            .then(res => res.json())\n            .then(data => {\n              this.addToSession(data);\n            })\n            .catch((err) => console.log('Error', err))\n\n    setTimeout(() => {\n      sessionStorage.clear()\n    }, 3600000)\n     */\n  }\n\n  fetchTrendingData = () => {\n    fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${apiKey}&limit=30`)\n            .then(res => res.json())\n            .then(data => {\n              this.setState({\n                trending: data\n              })\n            })\n            .catch((err) => console.log('Error', err))\n  }\n\n  // addToSession = (data) => {\n  //   let result;\n  //   if (sessionStorage.getItem('data') === null) {\n  //     result = [];\n  //   } else {\n  //     result = JSON.parse(sessionStorage.getItem('data'));\n  //   }\n  //   result.push(data);\n\t//   sessionStorage.setItem('data', JSON.stringify(result));\n  // }\n\n  fetchRandomData = () => {\n  \tif (counter < 10) {\n  \t\tfetch(`https://api.giphy.com/v1/gifs/random?api_key=haCNw7hoMOlTH6jMatt4WMJvyFRmSuQ3`)\n              .then(res => res.json())\n              .then(data => {\n                this.setState((prevState) => {\n                  return {\n                    random: prevState.random.concat(data)\n                  }\n                })\n              })\n              .catch((err) => console.log('Error', err))\n  \t\tcounter += 1;\n  \t\tthis.fetchRandomData()\n       }\n  }\n\n\n  check = () => {\n      let that = this;\n      window.onscroll = function() {\n        //window height without scrolling + the amount you have scrolled vertically is greater or equal to document body height\n        if ((window.innerHeight + window.pageYOffset) >= document.body.scrollHeight) {\n          if (that.state.show === 'random') {\n          console.log('reached bottom');\n          counter = 0;\n          that.fetchRandomData();\n          }\n        }\n      };\n  }\n\n  onRandom = () => {\n    this.setState({\n      show: 'random',\n      random: []\n    })\n    counter = 0;\n    this.fetchRandomData()\n  }\n\n  searchApi = () => {\n    this.setState({\n      show: 'search'\n    })\n    if (this.state.searchInput !== '') {\n      fetch(`https://api.giphy.com/v1/gifs/search?q=${this.state.searchInput}&api_key=${apiKey}&limit=30`)\n        .then(res => res.json())\n        .then(data => this.setState({\n          searchData: data,\n      }));\n        document.querySelector('input[type=\"text\"]').value = '';\n    } else {\n      alert('Invalid search')\n    }\n    this.setState({\n      searchInput: '',\n      searchData: []\n    })\n  }\n\n  onInputChange = (e) => {\n    this.setState({\n      searchInput: e.target.value.toLowerCase()\n    })\n  }\n\n  onTrending = () => {\n    this.setState({\n      show: 'trending'\n    })\n    counter = 0;\n    this.fetchTrendingData()\n  }\n\n  render() {\n    if (this.state.show === 'search') {\n      return (\n        <div className=\"container\">\n          <Menu searchApi={this.searchApi} onRandom={this.onRandom} onTrending={this.onTrending} onInputChange={this.onInputChange}/>\n          <DisplaySearch randomColor={randomColor} searchdata={this.state.searchData} />\n        </div>\n      )\n    } else if (this.state.show === 'random') {\n      return (\n          <div className=\"container\">\n            <Menu searchApi={this.searchApi} onRandom={this.onRandom} onTrending={this.onTrending} onInputChange={this.onInputChange}/>\n            <div className=\"main-content\">\n            {\n\n                    this.state.random.map((img, i) => {\n                      return <img style={{border:'20px solid ' + randomColor[Math.floor(Math.random() * 5)]}} key={i} src={img.data.images.original.url} alt='' />\n                    })\n\n            }\n            </div>\n          </div>\n      )\n    } else if (this.state.show === 'trending') {\n\n      if (this.state.trending.data) {\n        return (\n          <div className=\"container\">\n          <Menu searchApi={this.searchApi} onRandom={this.onRandom} onTrending={this.onTrending} onInputChange={this.onInputChange}/>\n          <div className=\"main-content\">\n            {\n              this.state.trending.data.map((img, i) => {\n                return <img style={{border:'20px solid ' + randomColor[Math.floor(Math.random() * 5)]}} key={i} src={img.images.original.url} alt=\"\" />\n              })\n            }\n          </div>\n          </div>\n        )\n      } else {\n        return (\n          <div className=\"container\">\n          <Menu searchApi={this.searchApi} onRandom={this.onRandom} onTrending={this.onTrending} onInputChange={this.onInputChange}/>\n          <h3>Loading...</h3>\n          </div>\n        )\n      }\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}